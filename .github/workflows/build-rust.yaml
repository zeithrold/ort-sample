name: Build Rust Application

on: [push, pull_request]

env:
  ONNXRUNTIME_VERSION: "1.20.1"

jobs:
  build-onnxruntime-directml:
    outputs:
      artifact: ${{ steps.upload-artifact.outputs.artifact }}
    # Since DirectML can not built without local prebuilt onnxruntime,
    # we need to build onnxruntime first.
    runs-on: windows-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: microsoft/onnxruntime
        ref: v${{ env.ONNXRUNTIME_VERSION }}
        submodules: 'recursive'
    
    - name: Set up cache
      uses: actions/cache@v4
      id: build-cache
      with:
        path: build
        key: onnxruntime-directml-${{ env.ONNXRUNTIME_VERSION }}

    - name: Build ONNX Runtime with DirectML
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: .\\build.bat --config Release --parallel --use_dml --skip_tests

    - name: Remove unnecessary files
      run: rm -rf build/Windows/Release/_deps
      shell: bash

    - name: Upload artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: onnxruntime-directml
        path: build

  build:
    needs: build-onnxruntime-directml
    strategy:
      matrix:
        platform:
          - runner-os: ubuntu-latest
            os: linux-amd64
            provider: cuda
          - runner-os: macos-13
            os: macos-amd64
            provider: coreml
          - runner-os: macos-latest
            os: macos-arm64
            provider: coreml
          - runner-os: windows-latest
            os: windows-amd64
            provider: directml
          - runner-os: windows-latest
            os: windows-amd64
            provider: cuda

    runs-on: ${{ matrix.platform.runner-os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Download onnxruntime-directml artifact
      if: ${{ matrix.platform.provider == 'directml' }}
      uses: actions/download-artifact@v4
      with:
        name: onnxruntime-directml
        path: onnxruntime

    - name: Display structure of downloaded files
      run: ls -R .

    - name: Build (with DirectML)
      if: ${{ matrix.platform.provider == 'directml' }}
      run: cargo build --release --features directml
      env:
        ORT_LIB_LOCATION: build/Windows

    - name: Build
      if: ${{ matrix.platform.provider != 'directml' }}
      run: cargo build --release --features ${{ matrix.platform.provider }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rust-binary-${{ matrix.platform.os }}-${{ matrix.platform.provider }}
        path: target/release/ort-sample
