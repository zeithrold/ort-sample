name: Build Rust Application

on: [push, pull_request]

env:
  ONNXRUNTIME_VERSION: "1.20.1"

jobs:
  build:
    strategy:
      matrix:
        platform:
          - runner-os: ubuntu-latest
            os: linux-amd64
            provider: cuda
          - runner-os: macos-13
            os: macos-amd64
            provider: coreml
          - runner-os: macos-latest
            os: macos-arm64
            provider: coreml
          - runner-os: windows-latest
            os: windows-amd64
            provider: directml
          - runner-os: windows-latest
            os: windows-amd64
            provider: cuda

    runs-on: ${{ matrix.platform.runner-os }}
    steps:
    - name: Set up cache
      uses: actions/cache@v4
      id: build-cache
      if: ${{ matrix.platform.provider == 'directml' }}
      with:
        path: onnxruntime
        key: onnxruntime-${{ env.ONNXRUNTIME_VERSION }}-${{ matrix.platform.provider }}

    - name: Checkout ONNX Runtime
      uses: actions/checkout@v4
      if: ${{ matrix.platform.provider == 'directml' && steps.build-cache.outputs.cache-hit != 'true' }}
      with:
        repository: microsoft/onnxruntime
        path: onnxruntime
        ref: v${{ env.ONNXRUNTIME_VERSION }}
        submodules: 'recursive'

    - name: Build ONNX Runtime
      if: ${{ matrix.platform.provider == 'directml' && steps.build-cache.outputs.cache-hit != 'true' }}
      run: .\\build.bat --config Release --parallel --use_dml --skip_tests

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: List ONNX Runtime with DirectML build
      if: ${{ matrix.platform.provider == 'directml' }}
      run: ls ${{ github.workspace }}\onnxruntime\build\Windows

    - name: Build (with DirectML)
      if: ${{ matrix.platform.provider == 'directml' }}
      run: cargo build --release --features directml
      env:
        # Should be set absolute path to onnxruntime/Windows
        ORT_LIB_LOCATION: ${{ github.workspace }}\onnxruntime\build\Windows

    - name: Build
      if: ${{ matrix.platform.provider != 'directml' }}
      run: cargo build --release --features ${{ matrix.platform.provider }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rust-binary-${{ matrix.platform.os }}-${{ matrix.platform.provider }}
        path: target/release/ort-sample
